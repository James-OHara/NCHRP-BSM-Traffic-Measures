# C2SMART Lab, NYU
# NCHRP 03-137
# @file    HB_Ext_Offline.py
# @author  Fan Zuo
# @author  Di Yang
# @date    2020-10-18

import pandas as pd
import numpy as np
from shapely.geometry import Polygon
import math
import time
import multiprocessing as mp

def main(dataset, hb_thr):
    """The main processing function.

    Keyword arguments:
    >>> dataset: The loaded trajectory data generated by TCA.
    >>> hb_thr: The hard braking threshold, float.
    RETURN: Time of detected hard braking, Locations of involved vehicles, 
            the deceleration value, and the merged event index
    """

    # Read the whole file using useful columns.
    df = pd.read_csv(dataset, usecols=['Vehicle_ID', 'transtime', 'X', 'Y', 'Speed', 'Heading', 'Avg_Acceleration'])
    df = df.sort_values(by=['transtime', 'Vehicle_ID'])
    print("Before drop duplicates, data size is:", len(df))
    df = df.drop_duplicates(subset=['X', 'Y', 'Speed', 'Heading', 'transtime'], keep="first")
    print("After drop duplicates, data size is:", len(df))
    df.index = pd.RangeIndex(start=0, stop=len(df), step=1)
    df['HB'] = df['Avg_Acceleration']
    # Extracting the hard braking events by pre-set threshold
    df['HB'] = df['HB'].apply(lambda x: 1 if(x<-hb_thr and x>-200) else np.nan)
    df = df.dropna(subset=['HB'])
    df = df.drop(columns=['Speed', 'Heading'])
    df = df.sort_values(by=['Vehicle_ID', 'transtime'])
    df.index = pd.RangeIndex(start=0, stop=len(df), step=1)
    
    # Merging continous conflicts for Offline mode
    df['Event_Combine'] = ''
    df.at[0, 'Event_Combine'] = 1
    event_num = 1

    for iter in range(1, len(df)):
        if (df.loc[iter, 'Vehicle_ID'] == df.loc[iter-1, 'Vehicle_ID']) & (float("{:.1f}".format(df.loc[iter, 'transtime'] - df.loc[iter-1, 'transtime'])) == 0.1):
            df.at[iter, 'Event_Combine'] = event_num
        else:
            event_num += 1
            df.at[iter, 'Event_Combine'] = event_num

    df.to_csv("HB_Offline_"+traj_file[:-4]+".csv")

if __name__ == "__main__":
    program_st = time.time()
    print("*******************  Start Program  *******************")
    print("Start time %s" % (time.strftime('%X', time.localtime(program_st))))

    traj_file = input("Please input the name of the trajectory file(*.csv):")
    hb_threshold = abs(float("{:.5f}".format(input("Please input the hard braking threshold(fpss, float): "))))
    main(traj_file, hb_threshold)

    ed_time = time.time()
    print("End time %s (%f)" % (time.strftime('%X', time.localtime(ed_time)), (ed_time - program_st)))
    print("*******************  End Program  *******************")